# .env.example - Environment variables template for Docker Compose
# Copy this file to .env and fill in your actual values.
# DO NOT commit the actual .env file to Git.

# --- Database Configuration (for PostgreSQL container) ---
POSTGRES_USER=your_db_user          # Choose a username for the database
POSTGRES_PASSWORD=your_db_password  # Choose a strong password for the database user
POSTGRES_DB=credit_compliance     # Choose a name for the database

# --- Backend Configuration ---
# This URL is used by the backend service to connect to the 'db' service defined in docker-compose.yml
# It uses the variables defined above.
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"

# Optional: Backend server port (defaults to 3001 if not set)
# PORT=3001

# Security
JWT_SECRET=your_strong_jwt_secret_key # Replace with a long, random, secret key

# The URL of the frontend application (used for CORS configuration)
# For local development with default ports, this is usually http://localhost:3000
FRONTEND_URL=http://localhost:3000

# Google Cloud Credentials (if used)
# Path to your Google Cloud service account key file ON YOUR HOST MACHINE (e.g., /Users/travis/keys/gcp-key.json)
GOOGLE_APPLICATION_CREDENTIALS_PATH= # Fill this in if you use GCP services
# Path where the credentials file will be mounted INSIDE the backend container (referenced in docker-compose.yml)
GOOGLE_APPLICATION_CREDENTIALS=/etc/gcp/credentials.json

# Google Cloud Storage (if used)
GCS_BUCKET_NAME=your_gcs_bucket_name

# Google Vertex AI (if used)
VERTEX_AI_PROJECT_ID=your_gcp_project_id
VERTEX_AI_LOCATION=your_gcp_region # e.g., us-central1

# Apify (if used)
APIFY_API_TOKEN=your_apify_api_token

# Screenshot Feature Configuration
SHOT_RATE_PER_MIN=5 # Max screenshot requests per minute (per IP/container)
CACHE_WINDOW_SEC=5  # Time window (seconds) for caching screenshots based on timestamp

# --- Frontend Configuration ---
# (No specific frontend variables needed in .env for now, NEXT_PUBLIC_API_URL is set directly in docker-compose.yml)
